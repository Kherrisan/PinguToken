generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String      @id
  name      String
  type      AccountType
  currency  String
  parentId  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  parent    Account?    @relation("AccountHierarchy", fields: [parentId], references: [id])
  children  Account[]   @relation("AccountHierarchy")
  postings  Posting[]
}

model Transaction {
  id         String           @id @default(cuid())
  date       DateTime
  payee      String?
  narration  String?
  createdAt  DateTime
  updatedAt  DateTime         @updatedAt
  importedAt DateTime         @default(now())
  postings   Posting[]
  rawRecords RawTransaction[]
  tags       Tag[]            @relation("TagToTransaction")
}

model Posting {
  id            String      @id @default(cuid())
  transactionId String
  accountId     String
  amount        Decimal
  currency      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  account       Account     @relation(fields: [accountId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
  @@index([accountId])
}

model Tag {
  id           String        @id @default(cuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("TagToTransaction")
}

model RawTransaction {
  id            String       @id @default(cuid())
  source        String
  rawData       Json
  transactionId String?
  identifier    String
  createdAt     DateTime
  updatedAt     DateTime     @updatedAt
  importedAt    DateTime     @default(now())
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  @@unique([source, identifier])
  @@index([transactionId])
  @@index([createdAt])
}

model ExchangeRate {
  id           String   @id @default(cuid())
  date         DateTime
  fromCurrency String
  toCurrency   String
  rate         Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([date, fromCurrency, toCurrency])
  @@index([date])
}

model ImportSource {
  id        String       @id @unique
  name      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  rules     ImportRule[]
}

model ImportRule {
  id              String       @id @default(cuid())
  sourceId        String
  name            String
  description     String?
  targetAccount   String
  methodAccount   String
  typePattern     String?
  categoryPattern String?
  peerPattern     String?
  descPattern     String?
  timePattern     String?
  amountMin       Float?
  amountMax       Float?
  statusPattern   String?
  methodPattern   String?
  priority        Int          @default(0)
  enabled         Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  source          ImportSource @relation(fields: [sourceId], references: [id])

  @@index([sourceId])
}

enum AccountType {
  ASSETS
  LIABILITIES
  INCOME
  EXPENSES
  EQUITY
}
